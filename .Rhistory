install.packages("rmarkdown")
install.packages("xfun")
load(rock)
rock
load(rock)
data <- rock
View(data)
rock
?rock
knitr::opts_chunk$set(echo = TRUE)
knitr::include_graphics(path = "IMMAGINI/castalda.jpg")
knitr::opts_chunk$set(echo = TRUE)
data(rock)
dati=rock
head(dati)
save.image("C:/Users/Alessia/Desktop/ARCA R-MARKDOWN/ENVIRONMENT.RData")
knitr::opts_chunk$set(echo = TRUE)
data(rock)
dati=rock
load(rock.environment)
load("C:/Users/Alessia/Desktop/ARCA R-MARKDOWN/rock.environment.RData")
knitr::opts_chunk$set(echo = TRUE)
data(rock)
dati=rock
load(rock.environment.RData)
knitr::opts_chunk$set(echo = TRUE)
data(rock)
dati=rock
knitr::opts_chunk$set(echo = TRUE)
data(rock)
dati=rock
load("rock.environment")
knitr::opts_chunk$set(echo = TRUE)
data(rock)
dati=rock
load(rock.environment)
save.image("C:/Users/Alessia/Desktop/ARCA R-MARKDOWN/rock_environment.RData")
knitr::opts_chunk$set(echo = TRUE)
data(rock)
dati=rock
load("rock_environment.RData")
knitr::opts_chunk$set(echo = TRUE)
# data(rock)
# dati=rock
load("rock_environment.RData")
summary(rock)
head(dati)
knitr::opts_chunk$set(echo = TRUE, comment=" ")
# data(rock)
# dati=rock
load("rock_environment.RData")
summary(rock)
data = rock
data$y = rock$perm
data$x = rock$area
summary(data$x)
data = rock
data$y = rock$perm
data$x = rock$area
summary(data$x)
data = rock
data$y = rock$perm
data$x = rock$area
summary(data$x)
data = rock
data$y = rock$perm
data$x = rock$area
summary(data$x)
summary(rock)
# rinominare la variabaile dipendente in y
data$y = rock$perm
View(data)
data = rock
data$y = rock$perm
data$x = rock$area
summary(data$x)
summary(data$y)
data = rock
data$y = rock$perm
data$x = rock$area
summary(data$x)
summary(data$y)
data = rock
data$y = rock$perm
data$x = rock$area
summary(data$x)
summary(data$y)
plot(data$y ~ data$x)
plot(data$y ~ data$x)
knitr::opts_chunk$set(echo = TRUE, comment=" ")
# data(rock)
# dati=rock
load("rock_environment.RData")
hook_output <- knitr::knit_hooks$get("output")
knitr::knit_hooks$set(output = function(x, options) {
if (!is.null(n <- options$out.lines)) {
x <- xfun::split_lines(x)
if (length(x) > n) {
# truncate the output
x <- c(head(x, n), "....\n")
}
x <- paste(x, collapse = "\n")
}
hook_output(x, options)
})
m = lm(y ~ x, data = data)
summary(m)
summary(rock)
data = rock
data$y = rock$perm
data$x = rock$area
summary(data$x)
summary(data$y)
?plot
install.packages("stargazer")
knitr::opts_chunk$set(echo = TRUE, comment=" ")
# data(rock)
# dati=rock
load("rock_environment.RData")
hook_output <- knitr::knit_hooks$get("output")
knitr::knit_hooks$set(output = function(x, options) {
if (!is.null(n <- options$out.lines)) {
x <- xfun::split_lines(x)
if (length(x) > n) {
# truncate the output
x <- c(head(x, n), "....\n")
}
x <- paste(x, collapse = "\n")
}
hook_output(x, options)
})
library(stargazer)
stargazer(rock, type="latex", summary = TRUE,
title= "Tabella di summary", digits = 2, header=FALSE)
m = lm(y ~ x, data = data)
summary(m)
stargazer(m, type = "html", summary = TRUE, title = "Risultati del modello", digits = 2, header = FALSE)
library(stargazer)
stargazer(rock, type="latex", summary = TRUE,
title= "Tabella di summary", digits = 3, header=FALSE)
m = lm(y ~ x, data = data)
summary(m)
stargazer(m, type = "latex", summary = TRUE, title = "Risultati del modello", digits = 2, header = FALSE)
m = lm(y ~ x, data = data)
summary(m)
stargazer(m, type = "latex", summary = TRUE, title = "Risultati del modello", digits = 2, header = FALSE)
m0 = lm(perm ~ 1, data = rock)
stargazer(m0, m1, type = "latex", title = "Confronto tra modelli", digits = 2, intercept.top = TRUE, intercept.bottom = FALSE, header = FALSE)
m1 = lm(perm ~ area, data = rock)
summary(m)
stargazer(m1, type = "latex", summary = TRUE, title = "Risultati del modello", digits = 2, header = FALSE)
m0 = lm(perm ~ 1, data = rock)
stargazer(m0, m1, type = "latex", title = "Confronto tra modelli", digits = 2, intercept.top = TRUE, intercept.bottom = FALSE, header = FALSE)
X = mean(rock$perm)
data$y[1]
X = mean(rock$perm)
data$y[1]
(data$y[1]- mean(data$y)/sd(data$y))
X = mean(rock$y)
data$y[1]
(data$y[1]- mean(data$y)/sd(data$y))
data = rock
data$y = rock$perm
data$x = rock$area
summary(data$x)
summary(data$y)
m1 = lm(perm ~ area, data = rock)
summary(m1)
stargazer(m1, type = "latex", summary = TRUE, title = "Risultati del modello", digits = 2, header = FALSE)
X = mean(rock$y)
data$y[1]
(data$y[1]- mean(data$y)/sd(data$y))
knitr::opts_chunk$set(echo = TRUE, comment=" ")
# data(rock)
# dati=rock
load("rock_environment.RData")
hook_output <- knitr::knit_hooks$get("output")
knitr::knit_hooks$set(output = function(x, options) {
if (!is.null(n <- options$out.lines)) {
x <- xfun::split_lines(x)
if (length(x) > n) {
# truncate the output
x <- c(head(x, n), "....\n")
}
x <- paste(x, collapse = "\n")
}
hook_output(x, options)
})
library(stargazer)
stargazer(rock, type="latex", summary = TRUE,
title= "Tabella di summary", digits = 3, header=FALSE)
rock
head(dati)
data = rock
data$y = rock$perm
data$x = rock$area
summary(data$x)
summary(data$y)
plot(data$y ~ data$x, col = "blue")
m1 = lm(perm ~ area, data = rock)
summary(m1)
stargazer(m1, type = "latex", summary = TRUE, title = "Risultati del modello", digits = 2, header = FALSE)
m0 = lm(perm ~ 1, data = rock)
stargazer(m0, m1, type = "latex", title = "Confronto tra modelli", digits = 2, intercept.top = TRUE, intercept.bottom = FALSE, header = FALSE)
install.packages("plotly")
grafico = ggplot(rock,
aes(y=peri,x=shape, color =shape, size = peri)) + geom_point() +
theme_bw() + theme(legend.position = "none")
grafico = ggplot2(rock,
aes(y=peri,x=shape, color =shape, size = peri)) + geom_point() +
theme_bw() + theme(legend.position = "none")
grafico = ggplot(rock,
aes(y=peri,x=shape, color =shape, size = peri)) + geom_point() +
theme_bw() + theme(legend.position = "none")
grafico = ggplot(rock,
aes(y=peri,x=shape, color =shape, size = peri)) + geom_point() +
theme_bw() + theme(legend.position = "none")
grafico = ggplot(rock,
aes(y=peri,x=shape, color =shape, size = peri)) + geom_point() +
theme_bw() + theme(legend.position = "none")
grafico = ggplot(rock,
aes(y=peri,x=shape, color =shape, size = peri)) + geom_point() +
theme_bw() + theme(legend.position = "none")
knitr::opts_chunk$set(echo = TRUE, comment=" ")
# data(rock)
# dati=rock
load("rock_environment.RData")
hook_output <- knitr::knit_hooks$get("output")
knitr::knit_hooks$set(output = function(x, options) {
if (!is.null(n <- options$out.lines)) {
x <- xfun::split_lines(x)
if (length(x) > n) {
# truncate the output
x <- c(head(x, n), "....\n")
}
x <- paste(x, collapse = "\n")
}
hook_output(x, options)
})
grafico = ggplot(rock,
aes(y=peri,x=shape, color =shape, size = peri)) + geom_point() +
theme_bw() + theme(legend.position = "none")
grafico = ggplot(rock,
aes(y=peri,x=shape, color =shape, size = peri)) + geom_point() +
theme_bw() + theme(legend.position = "none")
knitr::opts_chunk$set(echo = TRUE, comment=" ")
# data(rock)
# dati=rock
load("rock_environment.RData")
hook_output <- knitr::knit_hooks$get("output")
knitr::knit_hooks$set(output = function(x, options) {
if (!is.null(n <- options$out.lines)) {
x <- xfun::split_lines(x)
if (length(x) > n) {
# truncate the output
x <- c(head(x, n), "....\n")
}
x <- paste(x, collapse = "\n")
}
hook_output(x, options)
})
library(ggplot2)
grafico = ggplot(rock,
aes(y=peri,x=shape, color =shape, size = peri)) + geom_point() +
theme_bw() + theme(legend.position = "none")
plotly::ggplotly(grafico)
grafico = ggplot(rock,
aes(y=peri,x=shape, color =shape, size = peri)) + geom_point() +
theme_bw() + theme(legend.position = "none")
grafico
grafico = ggplot(rock,
aes(y=peri,x=shape, color =shape, size = peri)) + geom_point() +
theme_bw() + theme(legend.position = "none")
plotly::ggplotly(grafico)
grafico = ggplot(rock,
aes(y=peri,x=shape, color =shape, size = peri)) + geom_point() +
theme_bw() + theme(legend.position = "none")
plotly::ggplotly(grafico)
grafico = ggplot(rock,
aes(y=peri,x=shape, color =shape, size = peri)) + geom_point() +
theme_bw() + theme(legend.position = "none")
grafico
View(rock)
install.packages("wesanderson")
wesanderson::wes_palettes
wesanderson::wes_palette(renchDispatch)
wesanderson::wes_palette(FrenchDispatch)
wesanderson::wes_palette(FrenchDispatch)
wesanderson::wes_palette($FrenchDispatch)
wesanderson::wes_palette(wes_palette$FrenchDispatch)
